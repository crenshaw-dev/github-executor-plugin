// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/github"
	mock "github.com/stretchr/testify/mock"
)

// GitHubIssuesClient is an autogenerated mock type for the GitHubIssuesClient type
type GitHubIssuesClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, owner, repo, issue
func (_m *GitHubIssuesClient) Create(ctx context.Context, owner string, repo string, issue *github.IssueRequest) (*github.Issue, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, issue)

	var r0 *github.Issue
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.IssueRequest) *github.Issue); ok {
		r0 = rf(ctx, owner, repo, issue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Issue)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.IssueRequest) *github.Response); ok {
		r1 = rf(ctx, owner, repo, issue)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.IssueRequest) error); ok {
		r2 = rf(ctx, owner, repo, issue)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateComment provides a mock function with given fields: ctx, owner, repo, number, comment
func (_m *GitHubIssuesClient) CreateComment(ctx context.Context, owner string, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, number, comment)

	var r0 *github.IssueComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueComment) *github.IssueComment); ok {
		r0 = rf(ctx, owner, repo, number, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.IssueComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, *github.IssueComment) *github.Response); ok {
		r1 = rf(ctx, owner, repo, number, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int, *github.IssueComment) error); ok {
		r2 = rf(ctx, owner, repo, number, comment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewGitHubIssuesClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGitHubIssuesClient creates a new instance of GitHubIssuesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGitHubIssuesClient(t mockConstructorTestingTNewGitHubIssuesClient) *GitHubIssuesClient {
	mock := &GitHubIssuesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
